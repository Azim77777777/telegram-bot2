import logging
import sqlite3
import asyncio
import random
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

# –°–ª–æ–≤–æ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@dp.message_handler(lambda message: message.text.lower() in ["—Å—Å","ss","—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"])
async def register_text(message: types.Message):
    user = get_user(message.from_user.id)
    if not user:
        cur.execute("INSERT INTO users (user_id) VALUES (?)", (message.from_user.id,))
        conn.commit()
        await message.answer("‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: 1,000,000")
    else:
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")

# –°–ª–æ–≤–æ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞
@dp.message_handler(lambda message: message.text.lower() in ["—Å—Ç–∞—Ä—Ç","start"])
async def start_text(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –∏–≥—Ä–∞—Ç—å –≤ –º–∏–Ω—ã –∏ –¥–æ–±—ã–≤–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã.\n–ò—Å–ø–æ–ª—å–∑—É–π /hb –∏–ª–∏ '—Å–ø–∏—Å–æ–∫' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥.",
        reply_markup=main_menu()
    )

# üîë –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Ç–æ–∫–µ–Ω –æ—Ç BotFather
API_TOKEN = "8107743933:AAGRIImvxDpPXlXFwGtI_NMcG5u7kLT2VZ4"
ADMIN_ID = 7167501974

# üîß –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# üìÇ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("gamebot.db")
cur = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
cur.execute("""CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    balance INTEGER DEFAULT 1000000,
    factories TEXT DEFAULT '',
    hidden INTEGER DEFAULT 0,
    ref_id INTEGER DEFAULT NULL
)""")

cur.execute("""CREATE TABLE IF NOT EXISTS promo (
    code TEXT PRIMARY KEY,
    amount INTEGER,
    activations INTEGER
)""")
conn.commit()

# ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# üìå –•–µ–ª–ø–µ—Ä—ã
def get_user(user_id):
    cur.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    return cur.fetchone()

# üìå –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π
def parse_amount(text):
    text = text.lower()
    if "–∫–∫–∫" in text:
        return int(text.replace("–∫–∫–∫","000000000"))
    elif "–∫–∫" in text:
        return int(text.replace("–∫–∫","000000"))
    elif "–∫" in text:
        return int(text.replace("–∫","000"))
    else:
        return int(text)

# üìå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
@dp.message_handler(commands=["ss"])
async def register(message: types.Message):
    if not get_user(message.from_user.id):
        cur.execute("INSERT INTO users (user_id) VALUES (?)", (message.from_user.id,))
        conn.commit()
        await message.answer("‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: 1,000,000")
    else:
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")

# üìå –ü—Ä–æ—Ñ–∏–ª—å
@dp.message_handler(commands=["meb", "—è"])
async def profile(message: types.Message):
    user = get_user(message.from_user.id)
    if user:
        if user[3] == 1 and message.from_user.id != ADMIN_ID:
            return await message.answer("–ü—Ä–æ—Ñ–∏–ª—å —Å–∫—Ä—ã—Ç.")
        await message.answer(
            f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\nüí∞ –ë–∞–ª–∞–Ω—Å: {user[1]:,}\nüè≠ –ó–∞–≤–æ–¥—ã: {user[2] or '–Ω–µ—Ç'}"
        )
    else:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å: /ss")

# üìå –ë–æ–Ω—É—Å
@dp.message_handler(commands=["–±–æ–Ω—É—Å", "bonus"])
async def bonus(message: types.Message):
    user = get_user(message.from_user.id)
    if not user:
        return await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å: /ss")
    cur.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (100000, message.from_user.id))
    conn.commit()
    await message.answer("üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å: 100,000")
    
    # üìå –ó–∞–≤–æ–¥—ã
factories_list = {
    "small": 1_000_000,
    "medium": 10_000_000,
    "big": 100_000_000,
    "ultra": 500_000_000
}

@dp.message_handler(commands=["buy_factory"])
async def buy_factory(message: types.Message):
    try:
        _, name = message.text.split()
    except:
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /buy_factory small|medium|big|ultra")
    if name not in factories_list:
        return await message.answer("–¢–∞–∫–æ–≥–æ –∑–∞–≤–æ–¥–∞ –Ω–µ—Ç")
    price = factories_list[name]
    user = get_user(message.from_user.id)
    if user[1] < price:
        return await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏")
    cur.execute("UPDATE users SET balance = balance - ? WHERE user_id = ?", (price, message.from_user.id))
    new_factories = (user[2] + "," + name) if user[2] else name
    cur.execute("UPDATE users SET factories = ? WHERE user_id = ?", (new_factories, message.from_user.id))
    conn.commit()
    await message.answer(f"üè≠ –ó–∞–≤–æ–¥ {name} –∫—É–ø–ª–µ–Ω –∑–∞ {price:,}")

# üìå –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏ –æ—Ç –∑–∞–≤–æ–¥–æ–≤ (2%/—á–∞—Å)
async def factory_income():
    while True:
        await asyncio.sleep(3600)  # 1 —á–∞—Å
        cur.execute("SELECT * FROM users")
        users = cur.fetchall()
        for u in users:
            if not u[2]:
                continue
            factories = u[2].split(",")
            income = 0
            for f in factories:
                if f in factories_list:
                    income += int(factories_list[f] * 0.02)
            cur.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (income, u[0]))
        conn.commit()

# üìå –°–Ω—è—Ç—å –ø—Ä–∏–±—ã–ª—å —Å –∑–∞–≤–æ–¥–∞
@dp.message_handler(commands=["collect"])
async def collect_profit(message: types.Message):
    user = get_user(message.from_user.id)
    if not user or not user[2]:
        return await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≤–æ–¥–æ–≤")
    factories = user[2].split(",")
    total_income = 0
    for f in factories:
        if f in factories_list:
            total_income += int(factories_list[f] * 0.02)
    cur.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (total_income, user[0]))
    conn.commit()
    await message.answer(f"üí∞ –í—ã —Å–æ–±—Ä–∞–ª–∏ {total_income:,} —Å –∑–∞–≤–æ–¥–æ–≤!")

# üìå –ú–∏–Ω–∏-–∏–≥—Ä—ã —á–µ—Ä–µ–∑ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
@dp.message_handler()
async def keywords_handler(message: types.Message):
    text = message.text.lower().replace(" ", "")
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π
    def parse_value(s):
        s = s.lower()
        s = s.replace("–∫–∫–∫","000000000").replace("–∫–∫","000000").replace("–∫","000")
        return int(s)

    user = get_user(message.from_user.id)
    if not user:
        return await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å: /ss")

    # ---- –ú–∏–Ω–∏
    if text.startswith("–º–∏–Ω–∏"):
        try:
            bet = parse_value(text.replace("–º–∏–Ω–∏",""))
            if user[1] < bet:
                return await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
            if random.random() > 0.5:
                prize = bet * 2
                cur.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (prize, user[0]))
                conn.commit()
                await message.answer(f"üé≤ –ü–æ–±–µ–¥–∞! –í—ã–∏–≥—Ä—ã—à: {prize:,}\nüí∞ –ë–∞–ª–∞–Ω—Å: {user[1] + prize - bet:,}")
            else:
                cur.execute("UPDATE users SET balance = balance - ? WHERE user_id = ?", (bet, user[0]))
                cur.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (bet, ADMIN_ID))
                conn.commit()
                await message.answer(f"üé≤ –ü—Ä–æ–∏–≥—Ä—ã—à: {bet:,}\nüí∏ –î–µ–Ω—å–≥–∏ –ø–æ—à–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü—É!")
        except:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –º–∏–Ω–∏ <—Å—Ç–∞–≤–∫–∞> (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–∏–Ω–∏ 1–∫)")

    # ---- –†—É–ª–µ—Ç–∫–∞
    elif text.startswith("—Ä—É–ª"):
        try:
            parts = text.replace("—Ä—É–ª","").split(",")
            bet = parse_value(parts[0])
            choice = parts[1] if len(parts)>1 else "—á–µ—Ç"
            if user[1] < bet:
                return await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
            number = random.randint(0,36)
            color = "–∫—Ä–∞—Å–Ω–æ–µ" if number % 2 == 0 else "—á–µ—Ä–Ω–æ–µ"
            parity = "—á–µ—Ç" if number % 2 == 0 else "–Ω–µ—á–µ—Ç"
            win = False
            coef = 2
            if choice.isdigit() and int(choice) == number:
                win, coef = True, 35
            elif choice in [color, parity]:
                win = True
            if win:
                prize = bet * coef
                cur.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (prize, user[0]))
                conn.commit()
                await message.answer(f"üé∞ –í—ã–ø–∞–ª–æ: {number} ({color}, {parity})\n‚úÖ –ü–æ–±–µ–¥–∞! –í—ã–∏–≥—Ä—ã—à: {prize:,}")
            else:
                cur.execute("UPDATE users SET balance = balance - ? WHERE user_id = ?", (bet, user[0]))
                cur.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (bet, ADMIN_ID))
                conn.commit()
                await message.answer(f"üé∞ –í—ã–ø–∞–ª–æ: {number} ({color}, {parity})\n‚ùå –ü—Ä–æ–∏–≥—Ä—ã—à: {bet:,}\nüí∏ –î–µ–Ω—å–≥–∏ –ø–æ—à–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü—É!")
        except:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: —Ä—É–ª <—Å—Ç–∞–≤–∫–∞>,<—Ü–≤–µ—Ç/—á–µ—Ç/–Ω–µ—á–µ—Ç> (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä—É–ª 1–∫,–∫—Ä–∞—Å–Ω–æ–µ)")

# üìå –ß–∞—Å—Ç—å 2 –∑–∞–≤–µ—Ä—à–µ–Ω–∞

# üìå –ö—Ä–∞—à
@dp.message_handler(lambda message: message.text.lower().startswith("–∫—Ä–∞—à"))
async def crash_game(message: types.Message):
    user = get_user(message.from_user.id)
    if not user:
        return await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å: /ss")
    try:
        parts = message.text.lower().replace("–∫—Ä–∞—à","").split(",")
        bet = parse_amount(parts[0])
        coef = float(parts[1])
        if user[1] < bet:
            return await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
        crash_coef = round(random.uniform(1,5),2)
        if crash_coef >= coef:
            prize = int(bet * coef)
            cur.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (prize, user[0]))
            conn.commit()
            await message.answer(f"üí• –ö—Ä–∞—à –¥–æ—Å—Ç–∏–≥ {crash_coef}x\n‚úÖ –ü–æ–±–µ–¥–∞! –í—ã–∏–≥—Ä—ã—à: {prize:,}")
        else:
            cur.execute("UPDATE users SET balance = balance - ? WHERE user_id = ?", (bet, user[0]))
            cur.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (bet, ADMIN_ID))
            conn.commit()
            await message.answer(f"üí• –ö—Ä–∞—à –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –Ω–∞ {crash_coef}x\n‚ùå –ü—Ä–æ–∏–≥—Ä—ã—à: {bet:,}\nüí∏ –î–µ–Ω—å–≥–∏ –ø–æ—à–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü—É!")
    except:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –∫—Ä–∞—à <—Å—Ç–∞–≤–∫–∞>,<–∫–æ—ç—Ñ> (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫—Ä–∞—à 1–∫,2.5)")

# üìå –ë–∞—à–Ω—è
@dp.message_handler(lambda message: message.text.lower().startswith("–±–∞—à–Ω—è"))
async def tower_game(message: types.Message):
    user = get_user(message.from_user.id)
    if not user:
        return await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å: /ss")
    try:
        parts = message.text.lower().replace("–±–∞—à–Ω—è","").split(",")
        bet = parse_amount(parts[0])
        floors = int(parts[1])
        if user[1] < bet:
            return await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
        coef = 1 + (floors * 0.2)
        if random.random() > 0.5:
            prize = int(bet * coef)
            cur.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (prize, user[0]))
            conn.commit()
            await message.answer(f"üè∞ –ü–æ–±–µ–¥–∞! –≠—Ç–∞–∂–µ–π: {floors}, –í—ã–∏–≥—Ä—ã—à: {prize:,}")
        else:
            cur.execute("UPDATE users SET balance = balance - ? WHERE user_id = ?", (bet, user[0]))
            cur.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (bet, ADMIN_ID))
            conn.commit()
            await message.answer(f"üè∞ –ë–∞—à–Ω—è —Ä—É—Ö–Ω—É–ª–∞!\n‚ùå –ü—Ä–æ–∏–≥—Ä—ã—à: {bet:,}\nüí∏ –î–µ–Ω—å–≥–∏ –ø–æ—à–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü—É!")
    except:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –±–∞—à–Ω—è <—Å—Ç–∞–≤–∫–∞>,<—ç—Ç–∞–∂–∏> (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±–∞—à–Ω—è 1–∫–∫,3)")

# üìå –°–µ–π—Ñ
@dp.message_handler(lambda message: message.text.lower().startswith("—Å–µ–π—Ñ"))
async def safe_game(message: types.Message):
    user = get_user(message.from_user.id)
    if not user:
        return await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å: /ss")
    try:
        bet = parse_amount(message.text.lower().replace("—Å–µ–π—Ñ",""))
        if user[1] < bet:
            return await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
        keys = [1,2,3,4]
        correct = random.choice(keys)
        chosen = random.choice(keys)
        if chosen == correct:
            prize = bet * 2
            cur.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (prize, user[0]))
            conn.commit()
            await message.answer(f"üîê –í—ã —É–≥–∞–¥–∞–ª–∏ –∫–ª—é—á! –í—ã–∏–≥—Ä—ã—à: {prize:,}")
        else:
            cur.execute("UPDATE users SET balance = balance - ? WHERE user_id = ?", (bet, user[0]))
            cur.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (bet, ADMIN_ID))
            conn.commit()
            await message.answer(f"üîê –û—à–∏–±–∫–∞! –ü—Ä–æ–∏–≥—Ä—ã—à: {bet:,}\nüí∏ –î–µ–Ω—å–≥–∏ –ø–æ—à–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü—É!")
    except:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: —Å–µ–π—Ñ <—Å—Ç–∞–≤–∫–∞> (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–µ–π—Ñ 1–∫)")

# üìå –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤
@dp.message_handler(commands=["—Ç–æ–ø","top"])
async def top_players(message: types.Message):
    cur.execute("SELECT user_id, balance FROM users WHERE hidden=0 ORDER BY balance DESC LIMIT 10")
    top = cur.fetchall()
    text = "üèÜ –¢–û–ü –∏–≥—Ä–æ–∫–æ–≤:\n\n"
    for i,u in enumerate(top,1):
        text += f"{i}. {u[0]} ‚Äî {u[1]:,}‚ÇΩ\n"
    await message.answer(text)

# üìå –ê–¥–º–∏–Ω: –≤—ã–¥–∞—Ç—å/–∑–∞–±—Ä–∞—Ç—å –¥–µ–Ω—å–≥–∏
@dp.message_handler(commands=["admin_money"])
async def admin_money(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    try:
        _, uid, amount = message.text.split()
        uid, amount = int(uid), int(amount)
    except:
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin_money user_id —Å—É–º–º–∞(+/-)")
    cur.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (amount, uid))
    conn.commit()
    await message.answer(f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {amount}")

# üìå –ê–¥–º–∏–Ω: —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥
@dp.message_handler(commands=["new_promo"])
async def new_promo(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    try:
        _, code, amount, act = message.text.split()
        cur.execute("INSERT INTO promo VALUES (?, ?, ?)", (code, int(amount), int(act)))
        conn.commit()
        await message.answer(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ {code} —Å–æ–∑–¥–∞–Ω –Ω–∞ {amount}‚ÇΩ ({act} –∞–∫—Ç–∏–≤–∞—Ü–∏–π)")
    except:
        await message.answer("–§–æ—Ä–º–∞—Ç: /new_promo –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—É–º–º–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏")
        
        # üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üéÆ –ò–≥—Ä—ã"), KeyboardButton("üí∞ –≠–∫–æ–Ω–æ–º–∏–∫–∞"))
    kb.add(KeyboardButton("üõí –ú–∞—Ä–∫–µ—Ç"), KeyboardButton("üèÖ –°—Ç–∞—Ç—É—Å—ã"))
    return kb

# üìå –ü–æ–¥–º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π –ù–∞–∑–∞–¥
def back_menu():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥"))
    return kb

# üìå –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –∏–≥—Ä–∞—Ç—å –≤ –º–∏–Ω—ã –∏ –¥–æ–±—ã–≤–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /hb –∏–ª–∏ '—Å–ø–∏—Å–æ–∫' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥.",
        reply_markup=main_menu()
    )

# üìå –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ /hb
@dp.message_handler(lambda message: message.text.lower() in ["hb","—Å–ø–∏—Å–æ–∫"])
async def commands_list(message: types.Message):
    await message.answer(
        "üìñ –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        "‚öôÔ∏è –û—Å–Ω–æ–≤–Ω–æ–µ\n"
        "/ss ‚Äî –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n"
        "/meb –∏–ª–∏ –Ø ‚Äî –ü—Ä–æ—Ñ–∏–ª—å\n"
        "–ë–æ–Ω—É—Å ‚Äî –ë–æ–Ω—É—Å (–∫–∞–∂–¥—ã–µ 1 —á–∞—Å)\n"
        "/pr <–Ω–∞–∑–≤–∞–Ω–∏–µ> ‚Äî –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥\n"
        "/–ø–µ—Ä–µ–≤–µ—Å—Ç–∏ <—Å—É–º–º–∞> <–∞–π–¥–∏> ‚Äî –ü–µ—Ä–µ–≤–æ–¥\n"
        "/bb (1-9) –∏–ª–∏ /–∫—É–ø–∏—Ç—å (1-9) ‚Äî –ö—É–ø–∏—Ç—å —Å—Ç–∞—Ç—É—Å\n"
        "/—Ç–æ–ø –∏–ª–∏ —Ç–æ–ø ‚Äî –¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤\n"
        "/hb –∏–ª–∏ —Å–ø–∏—Å–æ–∫ ‚Äî –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "/new_promo [–Ω–∞–∑–≤–∞–Ω–∏–µ] [—Å—É–º–º–∞] [–∞–∫—Ç–∏–≤–∞—Ü–∏–π] ‚Äî –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥\n"
        "/inv ‚Äî –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å\n"
        "/market ‚Äî –ú–∞—Ä–∫–µ—Ç\n"
        "/shop ‚Äî –ö—É–ø–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç\n"
        "—Ä–µ—Ñ ‚Äî –í–∞—à–∞ —Ä–µ—Ñ\n"
        "/st ‚Äî –°–∫—Ä—ã—Ç—å/–æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –≤ —Ç–æ–ø–µ\n"
        "/farm ‚Äî –§–∞—Ä–º–∏–Ω–≥",
        reply_markup=main_menu()
    )

# üìå –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
@dp.message_handler(lambda message: message.text in ["üéÆ –ò–≥—Ä—ã", "üí∞ –≠–∫–æ–Ω–æ–º–∏–∫–∞", "üõí –ú–∞—Ä–∫–µ—Ç", "üèÖ –°—Ç–∞—Ç—É—Å—ã", "‚óÄÔ∏è –ù–∞–∑–∞–¥"])
async def menu_buttons(message: types.Message):
    if message.text == "üéÆ –ò–≥—Ä—ã":
        await message.answer(
            "üéÆ –ò–≥—Ä—ã\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            "—Ä—É–ª –∏–ª–∏ /rul <—Å—Ç–∞–≤–∫–∞>,<–≤—ã–±–æ—Ä> ‚Äî –†—É–ª–µ—Ç–∫–∞\n"
            "–ö–æ—Å—Ç–∏ <—Å—Ç–∞–≤–∫–∞>|<—Ç–∏–ø> ‚Äî –ò–≥—Ä–∞ –≤ –∫–æ—Å—Ç–∏\n"
            "–ú–∏–Ω–µ—Ä <—Å—Ç–∞–≤–∫–∞> ‚Äî –ò–≥—Ä–∞ –≤ –º–∏–Ω—ã\n"
            "–ö—Ä–∞—à <—Å—Ç–∞–≤–∫–∞>,<–∫–æ—ç—Ñ> ‚Äî –ò–≥—Ä–∞ –∫—Ä–∞—à\n"
            "–î—É—ç–ª—å <—Å—Ç–∞–≤–∫–∞> ‚Äî –î—É—ç–ª—å –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏\n"
            "–ë–∞—à–Ω—è <—Å—Ç–∞–≤–∫–∞>,<—ç—Ç–∞–∂–∏> ‚Äî –ò–≥—Ä–∞ –≤ –±–∞—à–Ω—é üÜï\n"
            "–°–µ–π—Ñ <—Å—Ç–∞–≤–∫–∞> ‚Äî –ò–≥—Ä–∞ –≤ —Å–µ–π—Ñ üÜï\n",
            reply_markup=back_menu()
        )
    elif message.text == "üí∞ –≠–∫–æ–Ω–æ–º–∏–∫–∞":
        await message.answer(
            "üí∞ –≠–∫–æ–Ω–æ–º–∏–∫–∞ / –°–µ—Ä–≤–∏—Å—ã\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            "/pr <–Ω–∞–∑–≤–∞–Ω–∏–µ> ‚Äî –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥\n"
            "/–ø–µ—Ä–µ–≤–µ—Å—Ç–∏ <—Å—É–º–º–∞> <–∞–π–¥–∏> ‚Äî –ü–µ—Ä–µ–≤–æ–¥\n"
            "/bb (1-9) / /–∫—É–ø–∏—Ç—å (1-9) ‚Äî –ö—É–ø–∏—Ç—å —Å—Ç–∞—Ç—É—Å\n"
            "/new_promo ... ‚Äî –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥\n"
            "/inv ‚Äî –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å\n"
            "/market, /shop ‚Äî –ú–∞—Ä–∫–µ—Ç/–ü–æ–∫—É–ø–∫–∞\n"
            "—Ä–µ—Ñ ‚Äî –í–∞—à–∞ —Ä–µ—Ñ —Å—Å—ã–ª–∫–∞\n"
            "/—Ç–æ–ø ‚Äî –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤\n"
            "/st ‚Äî –°–∫—Ä—ã—Ç—å/–æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n"
            "/farm ‚Äî –§–∞—Ä–º–∏–Ω–≥",
            reply_markup=back_menu()
        )
    elif message.text == "üõí –ú–∞—Ä–∫–µ—Ç":
        await message.answer(
            "üõí –ú–∞—Ä–∫–µ—Ç\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /market —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞–≥–∞–∑–∏–Ω\n"
            "–∏ /shop —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç.",
            reply_markup=back_menu()
        )
    elif message.text == "üèÖ –°—Ç–∞—Ç—É—Å—ã":
        await message.answer(
            "üèÖ –°—Ç–∞—Ç—É—Å—ã\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            '" " ‚Äî –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å (0 üí∞)\n'
            '"üëç" ‚Äî 1–∫ üí∞\n'
            '"üòÄ" ‚Äî 25–∫ üí∞\n'
            '"ü§Ø" ‚Äî 100–∫ üí∞\n'
            '"üòé" ‚Äî 500–∫ üí∞\n'
            '"üëΩ" ‚Äî 2–∫–∫ üí∞\n'
            '"üëæ" ‚Äî 7.5–∫–∫ üí∞\n'
            '"ü§ñ" ‚Äî 25–∫–∫ üí∞\n'
            '"üëª" ‚Äî 100–∫–∫ üí∞\n'
            '"üëë" ‚Äî 1–∫–∫–∫ üí∞\n'
            '"üé©" ‚Äî 1–∫–∫–∫–∫ üí∞\n'
            '"üé∞" ‚Äî 10–∫–∫–∫–∫ üí∞\n'
            '"üéÄ" ‚Äî –ü–ª–∞—Ç–Ω—ã–π –∏ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π\n'
            '"üêç" ‚Äî –ü–ª–∞—Ç–Ω—ã–π –∏ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π\n'
            "/bb (1-11) - –¥–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞!",
            reply_markup=back_menu()
        )
    elif message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

# üìå –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.create_task(factory_income())
    executor.start_polling(dp, skip_updates=True)
    
